g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(ggplot2)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
install.packages("caret")
library(ggplot2)
library(dplyr)
g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_boxplot()
lm(mpg ~ am, data=mtcars)
mtcars_group_am <- mtcars %>% group_by(am)
mtcars_group_am %>% summarise(mean(mpg))
g <- ggplot(mtcars, aes(x=factor(gear), y=mpg, fill=factor(am)))
g+geom_boxplot()
#load libraries
library(ggplot2)
library(ggmap)
library(maps)
library(plyr)
#get wif file
wip <- read.csv("wip.csv")
#get map data for US counties and states
county_map <- map_data("county")
state_map <- map_data("state")
#merge wip and county_map
wip_map <- merge(county_map, wip, by.x=c("region", "subregion"),
by.y=c("region","subregion"), all.x=TRUE)
#resort merged data
wip_map <- arrange(wip_map, group, order)
#relpace NA with 0's
wip_map[is.na(wip_map)] <- 0
#generate a disctrete color pallette
pal <- c("#F7FCF5","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
theme_clean <- function(base_size = 12) {
require(grid)
theme_grey(base_size) %+replace%
theme(
axis.title      =   element_blank(),
axis.text       =   element_blank(),
panel.background    =   element_blank(),
panel.grid      =   element_blank(),
axis.ticks.length   =   unit(0,"cm"),
axis.ticks.margin   =   unit(0,"cm"),
panel.margin    =   unit(0,"lines"),
plot.margin     =   unit(c(0,0,0,0),"lines"),
complete = TRUE
)
}
# final_map <- ggplot(wip_map, aes(x=long, y=lat, group=group, fill=factor(CATEGORY))) +
#         geom_polygon(colour="grey", aes(fill=factor(CATEGORY))) +
#         scale_fill_manual(values=pal) +
#         expand_limits(x = wip_map$long, y = wip_map$lat) +
#         coord_map("polyconic") +
#         labs(fill="Number Per\nCounty") +
#         theme_clean()
ggplot( wip_map, aes( x = long , y = lat , group=group ) ) +
geom_polygon( colour = "grey" , aes( fill = factor( CATEGORY ) ) ) +
scale_fill_manual( values = pal ) +
expand_limits( x = wip_map$long, y = wip_map$lat ) +
coord_map( "polyconic" ) +
labs(fill="Number Per\nCounty") +
theme_clean( ) +
geom_path( data = state_map , colour = "red")
final_map + geom_path( data = state_map , colour = "red")
install.packages("maps")
#load libraries
library(ggplot2)
library(ggmap)
library(maps)
library(plyr)
#get wif file
wip <- read.csv("wip.csv")
#get map data for US counties and states
county_map <- map_data("county")
state_map <- map_data("state")
#merge wip and county_map
wip_map <- merge(county_map, wip, by.x=c("region", "subregion"),
by.y=c("region","subregion"), all.x=TRUE)
#resort merged data
wip_map <- arrange(wip_map, group, order)
#relpace NA with 0's
wip_map[is.na(wip_map)] <- 0
#generate a disctrete color pallette
pal <- c("#F7FCF5","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
theme_clean <- function(base_size = 12) {
require(grid)
theme_grey(base_size) %+replace%
theme(
axis.title      =   element_blank(),
axis.text       =   element_blank(),
panel.background    =   element_blank(),
panel.grid      =   element_blank(),
axis.ticks.length   =   unit(0,"cm"),
axis.ticks.margin   =   unit(0,"cm"),
panel.margin    =   unit(0,"lines"),
plot.margin     =   unit(c(0,0,0,0),"lines"),
complete = TRUE
)
}
# final_map <- ggplot(wip_map, aes(x=long, y=lat, group=group, fill=factor(CATEGORY))) +
#         geom_polygon(colour="grey", aes(fill=factor(CATEGORY))) +
#         scale_fill_manual(values=pal) +
#         expand_limits(x = wip_map$long, y = wip_map$lat) +
#         coord_map("polyconic") +
#         labs(fill="Number Per\nCounty") +
#         theme_clean()
ggplot( wip_map, aes( x = long , y = lat , group=group ) ) +
geom_polygon( colour = "grey" , aes( fill = factor( CATEGORY ) ) ) +
scale_fill_manual( values = pal ) +
expand_limits( x = wip_map$long, y = wip_map$lat ) +
coord_map( "polyconic" ) +
labs(fill="Number Per\nCounty") +
theme_clean( ) +
geom_path( data = state_map , colour = "red")
final_map + geom_path( data = state_map , colour = "red")
install.packages("mapprof")
install.packages("mapproj")
#load libraries
library(ggplot2)
library(ggmap)
library(maps)
library(plyr)
#get wif file
wip <- read.csv("wip.csv")
#get map data for US counties and states
county_map <- map_data("county")
state_map <- map_data("state")
#merge wip and county_map
wip_map <- merge(county_map, wip, by.x=c("region", "subregion"),
by.y=c("region","subregion"), all.x=TRUE)
#resort merged data
wip_map <- arrange(wip_map, group, order)
#relpace NA with 0's
wip_map[is.na(wip_map)] <- 0
#generate a disctrete color pallette
pal <- c("#F7FCF5","#74C476","#41AB5D","#238B45","#006D2C","#00441B")
theme_clean <- function(base_size = 12) {
require(grid)
theme_grey(base_size) %+replace%
theme(
axis.title      =   element_blank(),
axis.text       =   element_blank(),
panel.background    =   element_blank(),
panel.grid      =   element_blank(),
axis.ticks.length   =   unit(0,"cm"),
axis.ticks.margin   =   unit(0,"cm"),
panel.margin    =   unit(0,"lines"),
plot.margin     =   unit(c(0,0,0,0),"lines"),
complete = TRUE
)
}
# final_map <- ggplot(wip_map, aes(x=long, y=lat, group=group, fill=factor(CATEGORY))) +
#         geom_polygon(colour="grey", aes(fill=factor(CATEGORY))) +
#         scale_fill_manual(values=pal) +
#         expand_limits(x = wip_map$long, y = wip_map$lat) +
#         coord_map("polyconic") +
#         labs(fill="Number Per\nCounty") +
#         theme_clean()
ggplot( wip_map, aes( x = long , y = lat , group=group ) ) +
geom_polygon( colour = "grey" , aes( fill = factor( CATEGORY ) ) ) +
scale_fill_manual( values = pal ) +
expand_limits( x = wip_map$long, y = wip_map$lat ) +
coord_map( "polyconic" ) +
labs(fill="Number Per\nCounty") +
theme_clean( ) +
geom_path( data = state_map , colour = "red")
final_map + geom_path( data = state_map , colour = "red")
library(maps)
map_data("county")
head(map_data("county"))
head(map_data("county"))
?maps
??maps
data("county.fips")
head(county.fips)
library(maps)
data(unemp)
unemp
head(unemp)
data(mtcars)
mtcars
ggplot(data=mtcars, aes(x=a, y = mpg))
library(ggplot2)
ggplot(data=mtcars, aes(x=a, y = mpg))
g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_boxplot()
lm(mpg ~ am, data=mtcars)
g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_line()
g <- ggplot(mtcars, aes(x=am, y=mpg, fill=factor(am)))
#g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_line()
g = ggplot(data.frame(x=mtcars$am, y = resid(lm(mtcars$mpg ~ mtcars$am))), aes(x=x, y=y))
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 7, color = "black", alpha = 0.4)
g = g + geom_point(size = 5, color = "red", alpha = 0.4)
g = g
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 7, color = "black", alpha = 0.4)
g = g + geom_point(size = 5, color = "red", alpha = 0.4)
g
g = ggplot(data.frame(x=factor(mtcars$am), y = resid(lm(mtcars$mpg ~ mtcars$am))), aes(x=x, y=y))
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 7, color = "black", alpha = 0.4)
g = g + geom_point(size = 5, color = "red", alpha = 0.4)
g
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
data(mtcars)
mean(mtcars$mpg)
fit  <- lm(mpg ~ am, data=mtcars)
summary(fit)
library(dplyr)
mpg_by_am <- group_by(am, mtcars)
mpg_by_am <- group_by(mtcars, am)
mean(mpg_by_am$mpg)
mpg_by_am
summary(mpg_by_am)
summarise(mpg_by_am, mean(mpg))
fit_mpg_disp <- lm(mpg ~ disp, data = mtcars)
library(ggplot2)
g <- ggplot(mtcars, aes(x=disp, y = mgp, fill = factor(am)))
g+geom_point()
g <- ggplot(mtcars, aes(x=disp, y = mpg, fill = factor(am)))
g+geom_point()
g+geom_point(size=5)
g <- ggplot(mtcars, aes(x=disp, y = mpg, fill = am))
g+geom_point(size=5)
g+geom_point(size=5, alpha = 0.5)
g <- ggplot(mtcars, aes(x=disp, y = mpg, fill = factor(am)))
g+geom_point(size=5, alpha = 0.5)
g <- ggplot(mtcars, aes(x=am, y=mpg, fill=factor(am)))
#g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_line()
g <- ggplot(mtcars, aes(x=disp, y = mpg, color = factor(am)))
g+geom_point()
g <- ggplot(mtcars, aes(x=disp, y = mpg, color = factor(am)))
g+geom_point(size=4)
g <- ggplot(mtcars, aes(x=disp, y = mpg, color = factor(am)))
g+geom_point(size=4, alpha = .6)
g <- ggplot(mtcars, aes(x=disp, y = mpg, color = factor(am)))
g+geom_point(size=4, alpha = .7)
g = ggplot(data.frame(x=mtcars$disp, y = resid(lm(mtcars$mpg ~ mtcars$disp))), aes(x=x, y=y))
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 7, color = "black", alpha = 0.4)
g = g + geom_point(size = 5, color = "red", alpha = 0.4)
g
g = ggplot(data.frame(x=mtcars$disp, y = resid(lm(mtcars$mpg ~ mtcars$disp))), aes(x=x, y=y))
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 4, color = "black", alpha = 0.4)
g = g + geom_point(size = 2, color = "red", alpha = 0.4)
g
g = ggplot(data.frame(x=mtcars$disp, y = resid(lm(mtcars$mpg ~ mtcars$disp))), aes(x=x, y=y))
g = g + geom_hline(yintercept=0, size = 2)
g = g + geom_point(size = 5, color = "black", alpha = 0.4)
g = g + geom_point(size = 3, color = "red", alpha = 0.4)
g
g <- ggplot(mtcars, aes(x=disp, y = mpg, color = factor(am)))
g+geom_point(size=4, alpha = .7)
summary(mtcars)
glimpse(mtcars)
g <- ggplot(mtcars, aes(x=factor(gear), y=mpg, fill=factor(am)))
g+geom_boxplot()
g <- ggplot(mtcars, aes(x=am, y=mpg, fill=factor(am)))
#g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_line()
g <- ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am)))
g+geom_boxplot()
g <- ggplot(mtcars, aes(x=factor(gear), y=mpg, fill=factor(am)))
g+geom_boxplot()
fit_mpg_gear <- lm(mpg ~ gear, data = mtcars)
summary(fit_mpg_gear)
g <- ggplot(mtcars, aes(x=gear, y=mpg, fill=factor(am)))
g+geom_line()
g <- ggplot(mtcars, aes(x=gear, y=mpg, fill=factor(am)))
g+geom_point()
g <- ggplot(mtcars, aes(x=factor(gear), y=mpg, color=factor(am)))
g+geom_point()
g <- ggplot(mtcars, aes(x=factor(gear), y=disp, color=factor(am)))
g+geom_point()
fit3 <- lm(mpg ~ am + gear + disp, data = mtcars)
summary(fit3)
install.packages("GGally")
library(GGally)
g <- ggpairs(mtcars, lower = list(continuous="smooth"), params = c(method = "loess")
)
g
fit3 <- lm(mpg ~ gear + disp, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ gear + disp, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ am + gear + disp, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ am + gear + disp + wt, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ factor(am) + gear + disp + wt, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ factor(am) + factor(gear) + disp + wt, data = mtcars)
summary(fit3)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
small_train <- training[,58:69]
names(training)
View(small_train)
precomp <- preProcess(log10(small_train+1),method="pca", pcaComp = 2)
precomp <- preProcess(log10(training[,58:69]+1),method="pca", pcaComp = 2)
precomp <- preProcess(log10(training[,58:69]+1))
prcomp <- prcomp(small_train)
plot(prcomp$x[,1], prcomp$x[,2])
prcomp
View(adData)
precomp <- preProcess(log10(training[,c(1,58:69)]+1),method="pca", pcaComp = 2)
precomp <- preProcess(log10(training[,58:69]+1),method="pca", pcaComp = 2)
precomp <- preProcess(log10(training[,58:69]+1),method="pca", thresh = .8)
precomp <- preProcess(training[,58:69],method="pca", thresh = .8)
precomp$rotation
small_train <- training[,c(1,58:69)]
View(small_train)
modelfit1 <- train(small_train$diagnosis ~ ., method = "glm")
modelfit1 <- train(small_train$diagnosis ~ ., method = "glm", data = small_train)
modelfit1
modelfit1 <- train(small_train$diagnosis ~ ., method = "glm", preProcess = "pca", data = small_train)
modelfit1
modelfit1 <- train(small_train$diagnosis ~ ., method = "glm", preProcess = "pca", data = small_train, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelfit2 <- train(small_train$diagnosis ~ ., method = "glm", preProcess = "pca", data = small_train, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelfit1 <- train(small_train$diagnosis ~ ., method = "glm", data = small_train)
small_test <- testing[,58:69]
small_test <- testing[,c(1,58:69)]
predictions <- predict(modelFit1, newdata = small_test)
predictions <- predict(modelfit1, newdata = small_test)
C1 <- confusionMatrix(predictions, small_test$diagnosis)
print(C1)
C2 <- confusionMatrix(small_test$diagnosis, predict(modelfit2, small_test))
print(C2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
fit
summary(fit)
data(mtcards)
data(mtcars)
View(mtcars)
fitcars <- lm(mpg ~ wt, data = mtcars)
summary(fitcars)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=mean(mtcars$wt)), interval="confidence")
predict(fitcars,data.frame(x=mean(mtcars$wt)), interval="confidence")
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=3, interval="confidence")
)
predict(fit,data.frame(x=3), interval="confidence")
predict(fit,data.frame(x=3), interval="predictive")
predict(fit,data.frame(x=3), interval="prediction")
predict(fit,data.frame(x=2), interval="prediction")
library(plotly)
Sys.setenv("plotly_username"="skcalanderson2")
Sys.setenv("plotly_api_key"="83a8loyghb")
library(plotly)
plot_ly(mtcars, x = am, y = wt, z = mpg)
plot_ly(mtcars, x = am, y = wt, z = mpg, type = surface)
plot_ly(mtcars, x = am, y = wt, z = mpg, type = "surface")
fit <- lm(mpg ~ ., data = mtcars)
plot(fit)
plot(fit)
plot(fit)
plot(fit)
plot(fit)
fit <- lm(mpg ~ am + wt, data = mtcars)
plot(fit)
plot(fit)
mtcars
mtcars["Volvo 142E",]
mtcars_no_outliers <- mtcars[-c("Fiat 128", "Toyota Corolla","Chrysler Imperial"),]
mtcars_no_outliers <- mtcars[-(c("Fiat 128", "Toyota Corolla","Chrysler Imperial")),]
mtcars_no_outliers <- mtcars[c(-"Fiat 128", -"Toyota Corolla",-"Chrysler Imperial"),]
mtcars[-("Fiat 128"),]
mtcars[("Fiat 128"),]
mtcars[1,]
mtcars[-11,]
mtcars[18,]
mtcars[17,]
mtcars[20,]
mtcars_no_outliers <- mtcars[-c(17,18,20),]
mtcars_no_outliers
fit2 <- lm(mpg ~ am + wt, data = mtcars)
plot(fit2)
fit2 <- lm(mpg ~ am + wt, data = mtcars_no_outliers)
plot(fit2)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:32,2],3)
summary(mtcars)
library(dplyr)
glimpse(mtcars)
glimpse(mtcars_no_outliers)
round(dfbetas(fit2)[1:29,2],3)
round(hatvalues(fit)[1:32],3)
round(hatvalues(fit2)[1:29],3)
plot(predict(fit), resid(fit), pch='.')
plot(predict(fit), resid(fit), pch='.', size = 2)
plot(predict(fit), resid(fit), pch='10', size = 2)
plot(predict(fit), resid(fit), pch='20', size = 2)
plot(predict(fit), resid(fit), pch=10, size = 2)
plot(fit2)
plot(fit2)
d <- date()
d[1]
d[[1]]
summary(d)
data("mtcars")
plot(mtcars)
fit5 <- lm(mpg ~ ., data = mtcars)
plot(fit5)
fit2_wt_hp <- lm(mpg ~ wt + hp, data = mtcars)
fit2_am_wt <- lm(mpg ~ am + wt, data = mtcars)
par(mfrow=c(2,2))
plot(fit2_am_wt)
plot(fit2_wt_hp)
plot(fit2$residuals)
mtcars
mtcars_no_outliers
fit2 <- lm(mpg ~ am + wt, data = mtcars_no_outliers)
fit2_wt_hp <- lm(mpg ~ wt + hp, data = mtcars_no_outliers)
plot(fit2_wt_hp)
plot(fit2_wt_hp)
fit2_wt_hp <- lm(mpg ~ wt + hp, data = mtcars)
plot(fit2_wt_hp)
fit3_wt_hp <- lm(mpg ~ ., data = mtcars_no_outliers)
plot(fit3_wt_hp)
fit3_wt_hp <- lm(mpg ~ ., data = mtcars_no_outliers)
plot(fit3_wt_hp)
fit2_wt_hp <- lm(mpg ~ wt + hp, data = mtcars)
plot(fit2_wt_hp)
fit2_wt_hp <- lm(mpg ~ wt + hp, data = mtcars_no_outliers)
plot(fit2_wt_hp)
plot(fit2_wt_hp)
plot(fit2_wt_hp)
fitam <- lm(mpg ~ am, data = mtcars)
plot(fitam)
plot(fitam)
library(dplyr)
library(caret)
trData <- read.csv("pml-training.csv", na.strings=c("NA",""), header=TRUE)
trDataTidy <- filter(trData, new_window == "no")
trDataTidy <- trDataTidy[,-c(1,2,6,7,12:36,50:59,69:83,87:101,103:112,125:139,141:150)]
setwd("~/DevelopmentStuff/Coursera/Practical Machine Learning/PML_Project")
trData <- read.csv("pml-training.csv", na.strings=c("NA",""), header=TRUE)
trDataTidy <- filter(trData, new_window == "no")
trDataTidy <- trDataTidy[,-c(1,2,6,7,12:36,50:59,69:83,87:101,103:112,125:139,141:150)]
train <- createDataPartition(y=trDataTidy$classe, p=0.1, list=FALSE)
trainData <- trDataTidy[train,]
myModel <- train(trainData$classe ~ ., method="rf", trControl=trainControl(method = "oob", number = 50, repeats = 4), data=trainData,importance = TRUE)
trainPartition2 <- trDataTidy[-train,]
pred <- predict(myModel, newdata=trainPartition2)
print(confusionMatrix(pred, newdata=trainPartition2$classe), digits = 4)
print(confusionMatrix(pred, trainPartition2$classe), digits = 4)
conMatrix <- confusionMatrix(pred, trainPartition2$classe)
conMatrix
conMatrix$Accuracy
conMatrix$overAll
conMatrix$overall
conMatrix$overall[1]
conMatrix$overall[[1]]
test <- read.csv("pml-testing.csv", na.strings=c("NA",""), header=TRUE)
testTidy <- filter(test, new_window == "no")
answers <- predict(myModel, newdata = testTidy)
answers
test <- read.csv("pml-testing.csv", na.strings=c("NA",""), header=TRUE)
testTidy <- filter(test, new_window == "no")
answers <- predict(myModel, newdata = testTidy)
answers
answers <- as.character(answers)
answers
source('~/DevelopmentStuff/Coursera/Practical Machine Learning/PML_Project/pml_write_files.R')
pml_write_files(answers)
source('~/DevelopmentStuff/Coursera/Practical Machine Learning/PML_Project/pml_write_files.R')
pml_write_files(answers)
